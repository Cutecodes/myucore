/libs
defs.h  --define the type, such as define short as int8_t
x86.h --pack the x86 assember as the c function
elf.h --simple elf format
error.h --define the kernel Error number
unistd.h --define some macro, such as system call number
atomic.h --x86 Atomic operations
dirent.h --struct dirent 
stat.h --file attributes??
stdarg.h --variable-argument implent, va_start(ap,last),va_arg(ap,type),va_end()stdio.h -- define basic io function
stdlib.h --rand() srand() and so on
string.h --define strlen() strcmp()
list.h --define and implement the doubly linked list
skew_heap.h --define and implement the skew_heap
hash.c --a simple hash function
printfmt.c --implenment like print("%s",a);
string.c --implement strlen()...
rand.c --rand() and srand()

/kern/libs
stdio.c --console input and output
string.c --strdup() and stradd()
readline.c --read a line from console
/kern/init
entry.S --page va 0-4M and kernel space 0xC0000000 to 0-4M
init.c --init all module
/kern/driver
console.h --put a char to console,printfun will call it
console.c --implement
kbdreg.h --define keyboard code
ide.h --ide device ,such as hard disk
ide.c 
intr.h --cli and sti
intr.c
picirq.h --8259 pic controller
picirq.c
clock.h --time and time interrupt
clock.c 

/kern/debug 
assert.h --define warn(...) panic(...) assert(x)
stab.h --gdb stab format struct
kdebug.h --define fun to print kdebug info
kdebug.c --implement fun to print kdebug info
kmonitor.h --fun(int argc,char** argv,struct trap *tf)
kmonitor.c --implement fun() in kmonitor.h

/
Makefile

/boot
asm.h --macros to create gdt
bootasm.S --Enable A20, probe_memory, load gdt
bootmain.c --read kernel

/tools
function.mk

