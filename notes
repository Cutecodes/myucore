/libs
defs.h  --define the type, such as define short as int8_t
x86.h --pack the x86 assember as the c function
elf.h --simple elf format
error.h --define the kernel Error number
unistd.h --define some macro, such as system call number
atomic.h --x86 Atomic operations
dirent.h --struct dirent 
stat.h --file attributes??
stdarg.h --variable-argument implent, va_start(ap,last),va_arg(ap,type),va_end()stdio.h -- define basic io function
stdlib.h --rand() srand() and so on
string.h --define strlen() strcmp()
list.h --define and implement the doubly linked list
skew_heap.h --define and implement the skew_heap
hash.c --a simple hash function
printfmt.c --implenment like print("%s",a);
string.c --implement strlen()...
rand.c --rand() and srand()
----------finished----------

/kern/libs
stdio.c --console input and output
string.c --strdup() and stradd()
readline.c --read a line from console
----------finished----------

/kern/init
entry.S --page va 0-4M and kernel space 0xC0000000 to 0-4M
init.c --init all module
----------finished----------

/kern/driver
console.h --put a char to console,printfun will call it
console.c --implement
kbdreg.h --define keyboard code
ide.h --ide device ,such as hard disk
ide.c 
intr.h --cli and sti
intr.c
picirq.h --8259 pic controller
picirq.c
clock.h --time and time interrupt
clock.c 
----------finished----------

/kern/debug 
assert.h --define warn(...) panic(...) assert(x)
stab.h --gdb stab format struct
kdebug.h --define fun to print kdebug info
kdebug.c --implement fun to print kdebug info
kmonitor.h --fun(int argc,char** argv,struct trap *tf)
kmonitor.c --implement fun() in kmonitor.h
----------finished----------

/kern/trap
vectors.S --_vectors trap tables 
trapentry.S -- the trapentry between c and assember
trap.h --trap init ,handle trap
trap.c
----------finished----------

/kern/mm
mmu.h --define constant Eflags register,segment type,segment table item,gdt,idt,tss... and so on,PDX(la) PTX(la)...
memlayout.h --mem layout and some struct to manage mem
pmm.h --define the interface to pa manager
pmm.c --the func to unique the pmm interface and check it
default_pmm.h --the pmm's implement
default_pmm.c --implement
kmalloc.h --kernel malloc a memory,slab 
kmalloc.c --implement
swap.h --define swap_manager
swap.c --swap init and test
swap_fifo.h --fifo swap
swap_fifo.c 
vmm.h --vma_struct and mm_struct
vmm.c --do_pgfault
----------finished----------


/kern/fs/sfs
bitmap.h --the bitmap data struct for sfs
bitmap.c
sfs.h --define some struct for sfs,such as superblock,inode and so on
sfs.c --the sys_init()
sfs_fs.c --struct fs funs,sfs_fs' implement ,the interface
sfs_inode.c -- the sfs's implement open(),write() the inodes
sfs_io.c -- io_read() and io_write(),will read/write data on disk
sfs_lock -- lock
----------finished----------
/kern/fs/devs
dev.h --define struct device
dev.c --dev init and wrap the dev ops into inode ops
dev_disk0.c -- disk dev ,call ide funs
dev_stdin.c -- read from stdin buffer
dev_stdout.c --stdout,call cputchar
----------finished----------
/kern/fs/swap
swapfs.h --define swapfs_init(),swapfs_read(),swapfs_write
swapfs.c --implement the funs directly by using ide_read_secs and ide_write_secs
----------finished----------
/kern/fs/vfs
inode.h -- define srtuct inode and method on it
inode.c 
vfs.h -- define struct fs and method on it
vfs.c
vfsdev.c --dev list
vfspath.c --some funs to change the current thread' file struct
vfslookup.c --according to the path to the inode
vfsfile.c --vfs open write mkdir and so on
----------finished----------
/kern/fs
sysfile.h --sys_open() and so on,wrap the file open()
sysfile.c
iobuf.h --the buffer class/struct
iobuf.c
fs.h --file_struct for therad
fs.c --init fun
file.h --struct file to save the open files
file.c 
----------finished----------

/kern/syscall
syscall.h
syscall.c --implement the syscall entry
----------finished----------

/kern/process
entry.S --the interface between a fun and a thread
switch.S --switch the current context to the next
proc.h --define the pcb struct or called thread class and method on it
proc.c 

/
Makefile
----------finished----------

/boot
asm.h --macros to create gdt
bootasm.S --Enable A20, probe_memory, load gdt
bootmain.c --read kernel
----------finished----------

/tools
function.mk --makefile funcs
boot.ld --the boot link script
kernel.ld --the kernel link script
user.ld --the user app link script
gdbinit --config of remote gdb
grade.sh --??
mksfs.c --can format the sfs
sign.c --can generate the first start block 512B
vector.c --generate the asm code for trap
----------finished----------

/user
*.c --some user app
/user/libs
initcode.S --the entry of user app,use ebx and ecx get argc and argv and call umain()
umain.c --umain() open stdin and stdout ,the call main()
* --some sys_call
file.h --wrap file syscall
dir.h --wrap dir syscall
----------finished----------
 
